pub mod statement;

pub mod error;
pub mod token;

const REG8: [&str; 8] = ["al", "cl", "dl", "bl", "ah", "ch", "dh", "bh"];
const REG16: [&str; 8] = ["ax", "cx", "dx", "bx", "sp", "bp", "si", "di"];
const REG_SEGMENT: [&str; 4] = ["es", "cs", "ss", "ds"];
const INSTRUCTION: [&str; 110] = [
    // Data transfer
    "mov",
    "push",
    "pop",
    "xchg",
    "in",
    "out",
    "xlat",
    "lea",
    "lds",
    "les",
    "lahf",
    "sahf",
    "pushf",
    "popf",
    // Arithmetic
    "add",
    "adc",
    "inc",
    "aaa",
    "daa",
    "sub",
    "sbb",
    "dec",
    "neg",
    "cmp",
    "aas",
    "das",
    "mul",
    "imul",
    "aam",
    "div",
    "idiv",
    "aad",
    "cbw",
    "cwd",
    // Logic
    "not",
    "shl",
    "sal",
    "shr",
    "sar",
    "rol",
    "ror",
    "rcl",
    "rcr",
    "and",
    "test",
    "or",
    "xor",
    // String manipulation
    "rep",
    "movsb",
    "movsw",
    "cmpsb",
    "cmpsw",
    "scasb",
    "scasw",
    "lodsb",
    "lodsw",
    "stosb",
    "stosw",
    // Control Transfer
    "call",
    "jmp",
    "ret",
    "je",
    "jz",
    "jl",
    "jnge",
    "jle",
    "jng",
    "jb",
    "jnae",
    "jbe",
    "jna",
    "jp",
    "jpe",
    "jo",
    "js",
    "jne",
    "jnz",
    "jnl",
    "jge",
    "jnle",
    "jg",
    "jnb",
    "jae",
    "jnbe",
    "ja",
    "jnp",
    "jpo",
    "jno",
    "jns",
    "loop",
    "loopz",
    "loope",
    "loopnz",
    "loopne",
    "jcxz",
    "int",
    "into",
    "iret",
    // Processor control
    "clc",
    "cmc",
    "stc",
    "cld",
    "std",
    "cli",
    "sti",
    "hlt",
    "wait",
    "esc",
    "segment",
    // No operation
    "nop"
];
const PREFIX_INSTRUCTION: [&str; 6] = ["lock", "repne", "repnz", "rep", "repe", "repz"];
const PSEUDO_INSTRUCTION: [&str; 9] = ["db", "dw", "dd", "dq", "resb", "resw", "resd", "resq", "equ"];
